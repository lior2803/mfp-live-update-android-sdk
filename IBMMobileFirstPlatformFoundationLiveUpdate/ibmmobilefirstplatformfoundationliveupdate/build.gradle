/**
 *   Â© Copyright 2016 IBM Corp.
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */

apply plugin: 'com.android.library'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.3.0'

    compile group: 'com.ibm.mobile.foundation',
            name: 'ibmmobilefirstplatformfoundation',
            version: '8.0.+',
            ext: 'aar',
            transitive: true
}


apply plugin: 'maven'

def groupId = PUBLISH_GROUP_ID
def artifactId = PUBLISH_ARTIFACT_ID
def version = PUBLISH_VERSION

def localReleaseDest = "${buildDir}/release/${version}"

task clearJar(type: Delete) {
    delete 'target/'+ project.name + '.jar'
    delete 'build/libs/'+ project.name + '.jar'
}

task clearTargetClasses(type: Delete){
    delete 'target/classes'
}

task clearAARFromTarget(type: Delete){
    delete 'target/' + project.name + '.aar'
}

clean.dependsOn clearJar
clean.dependsOn clearTargetClasses
clean.dependsOn clearAARFromTarget

//Include resource files into generated JAR:
task copyResourcesToClassesFolderRelease(type: Copy){
    from 'src/main/resources/'
    into 'build/intermediates/classes/release/'
    include '**/*.properties'
}

task copyResourcesToClassesFolderDebug(type: Copy){
    from 'src/main/resources/'
    into 'build/intermediates/classes/debug/'
    include '**/*.properties'
}

copyResourcesToClassesFolderRelease.dependsOn copyResourcesToClassesFolderDebug

//By default, it puts the JAR in /build/libs.
task createJar(type: Jar) {
    from 'build/intermediates/classes/release/'
    archiveName project.name + '.jar'
    exclude '**/BuildConfig.*'
}

task makeJar(type: Copy) {
    from 'build/libs'
    into 'target/'
    include project.name + '.jar'
}


task copyJavaDocToAAR(type: Copy){
    from 'build/libs/'
    into 'src/main/assets'
    rename { String fileName ->
        fileName = 'ibmmobilefirstplatformfoundationliveupdate-javadoc.jar'
    }
}

preBuild.dependsOn copyJavaDocToAAR
makeJar.dependsOn clearJar
makeJar.dependsOn copyResourcesToClassesFolderRelease
makeJar.dependsOn createJar


task generateJavadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs

    exclude '**/BuildConfig.java'
    exclude '**/R.java'
    exclude '**/internal/**'

    options.links 'http://docs.oracle.com/javase/7/docs/api/'

    options.encoding 'UTF-8'

    options.memberLevel = JavadocMemberLevel.PUBLIC

    setTitle 'IBM MobileFirst Foundation LiveUpdate Android SDK'
}

task androidJavadocsJar(type: Jar, dependsOn: generateJavadoc) {
    classifier = 'javadoc'
    from generateJavadoc.destinationDir
}

artifacts {
    archives androidJavadocsJar
}

def getVersion() {
    return '8.0.0'
}